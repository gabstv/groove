// Code generated by ecs https://github.com/gabstv/ecs; DO NOT EDIT.

package core

import (
    "sort"
    

    "github.com/gabstv/ecs/v2"
)








const uuidAudioPlayerComponent = "9C7DB259-6A3E-4DD3-B277-4B35DA5709AF"
const capAudioPlayerComponent = 256

type drawerAudioPlayerComponent struct {
    Entity ecs.Entity
    Data   AudioPlayer
}

// WatchAudioPlayer is a helper struct to access a valid pointer of AudioPlayer
type WatchAudioPlayer interface {
    Entity() ecs.Entity
    Data() *AudioPlayer
}

type slcdrawerAudioPlayerComponent []drawerAudioPlayerComponent
func (a slcdrawerAudioPlayerComponent) Len() int           { return len(a) }
func (a slcdrawerAudioPlayerComponent) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }
func (a slcdrawerAudioPlayerComponent) Less(i, j int) bool { return a[i].Entity < a[j].Entity }


type mWatchAudioPlayer struct {
    c *AudioPlayerComponent
    entity ecs.Entity
}

func (w *mWatchAudioPlayer) Entity() ecs.Entity {
    return w.entity
}

func (w *mWatchAudioPlayer) Data() *AudioPlayer {
    
    
    id := w.c.indexof(w.entity)
    if id == -1 {
        return nil
    }
    return &w.c.data[id].Data
}

// AudioPlayerComponent implements ecs.BaseComponent
type AudioPlayerComponent struct {
    initialized bool
    flag        ecs.Flag
    world       ecs.BaseWorld
    wkey        [4]byte
    data        []drawerAudioPlayerComponent
    
}

// GetAudioPlayerComponent returns the instance of the component in a World
func GetAudioPlayerComponent(w ecs.BaseWorld) *AudioPlayerComponent {
    return w.C(uuidAudioPlayerComponent).(*AudioPlayerComponent)
}

// SetAudioPlayerComponentData updates/adds a AudioPlayer to Entity e
func SetAudioPlayerComponentData(w ecs.BaseWorld, e ecs.Entity, data AudioPlayer) {
    GetAudioPlayerComponent(w).Upsert(e, data)
}

// GetAudioPlayerComponentData gets the *AudioPlayer of Entity e
func GetAudioPlayerComponentData(w ecs.BaseWorld, e ecs.Entity) *AudioPlayer {
    return GetAudioPlayerComponent(w).Data(e)
}

// WatchAudioPlayerComponentData gets a pointer getter of an entity's AudioPlayer.
//
// The pointer must not be stored because it may become invalid overtime.
func WatchAudioPlayerComponentData(w ecs.BaseWorld, e ecs.Entity) WatchAudioPlayer {
    return &mWatchAudioPlayer{
        c: GetAudioPlayerComponent(w),
        entity: e,
    }
}

// UUID implements ecs.BaseComponent
func (AudioPlayerComponent) UUID() string {
    return "9C7DB259-6A3E-4DD3-B277-4B35DA5709AF"
}

// Name implements ecs.BaseComponent
func (AudioPlayerComponent) Name() string {
    return "AudioPlayerComponent"
}

func (c *AudioPlayerComponent) indexof(e ecs.Entity) int {
    i := sort.Search(len(c.data), func(i int) bool { return c.data[i].Entity >= e })
    if i < len(c.data) && c.data[i].Entity == e {
        return i
    }
    return -1
}

// Upsert creates or updates a component data of an entity.
// Not recommended to be used directly. Use SetAudioPlayerComponentData to change component
// data outside of a system loop.
func (c *AudioPlayerComponent) Upsert(e ecs.Entity, data interface{}) {
    v, ok := data.(AudioPlayer)
    if !ok {
        panic("data must be AudioPlayer")
    }
    
    id := c.indexof(e)
    
    if id > -1 {
        
        dwr := &c.data[id]
        dwr.Data = v
        
        return
    }
    
    rsz := false
    if cap(c.data) == len(c.data) {
        rsz = true
        c.world.CWillResize(c, c.wkey)
        
    }
    newindex := len(c.data)
    c.data = append(c.data, drawerAudioPlayerComponent{
        Entity: e,
        Data:   v,
    })
    if len(c.data) > 1 {
        if c.data[newindex].Entity < c.data[newindex-1].Entity {
            c.world.CWillResize(c, c.wkey)
            
            sort.Sort(slcdrawerAudioPlayerComponent(c.data))
            rsz = true
        }
    }
    
    if rsz {
        
        c.world.CResized(c, c.wkey)
        c.world.Dispatch(ecs.Event{
            Type: ecs.EvtComponentsResized,
            ComponentName: "AudioPlayerComponent",
            ComponentID: "9C7DB259-6A3E-4DD3-B277-4B35DA5709AF",
        })
    }
    
    c.world.CAdded(e, c, c.wkey)
    c.world.Dispatch(ecs.Event{
        Type: ecs.EvtComponentAdded,
        ComponentName: "AudioPlayerComponent",
        ComponentID: "9C7DB259-6A3E-4DD3-B277-4B35DA5709AF",
        Entity: e,
    })
}

// Remove a AudioPlayer data from entity e
//
// Warning: DO NOT call remove inside the system entities loop
func (c *AudioPlayerComponent) Remove(e ecs.Entity) {
    
    
    i := c.indexof(e)
    if i == -1 {
        return
    }
    
    //c.data = append(c.data[:i], c.data[i+1:]...)
    c.data = c.data[:i+copy(c.data[i:], c.data[i+1:])]
    c.world.CRemoved(e, c, c.wkey)
    
    c.world.Dispatch(ecs.Event{
        Type: ecs.EvtComponentRemoved,
        ComponentName: "AudioPlayerComponent",
        ComponentID: "9C7DB259-6A3E-4DD3-B277-4B35DA5709AF",
        Entity: e,
    })
}

func (c *AudioPlayerComponent) Data(e ecs.Entity) *AudioPlayer {
    
    
    index := c.indexof(e)
    if index > -1 {
        return &c.data[index].Data
    }
    return nil
}

// Flag returns the 
func (c *AudioPlayerComponent) Flag() ecs.Flag {
    return c.flag
}

// Setup is called by ecs.BaseWorld
//
// Do not call this directly
func (c *AudioPlayerComponent) Setup(w ecs.BaseWorld, f ecs.Flag, key [4]byte) {
    if c.initialized {
        panic("AudioPlayerComponent called Setup() more than once")
    }
    c.flag = f
    c.world = w
    c.wkey = key
    c.data = make([]drawerAudioPlayerComponent, 0, 256)
    c.initialized = true
    
}


func init() {
    ecs.RegisterComponent(func() ecs.BaseComponent {
        return &AudioPlayerComponent{}
    })
}
